
TODO:
----
## Interactive mode
	[x] - backspace (erase)
	[x] - left/right cursor
	[x] - HOME/END key
	[x] - DEL key
	[x] - Insert Mode
	[ ] - Cursor for Insert/Delete Mode
	[x] - Up/Down command line history
	[ ] - Parse (but not execute) function to check syntax
	[ ] - Enter interactive mode after Syntax failure (or suppress using flags - in inline functions)
## Variable entries
	[x] - Variable setting (ex: y=2.4)
		[x] - before equation: ex. y=2.4 2pi*y+y
		[x] - Set variable on the fly (ex. 2pi*2.4=x; 5.2-x)
			[x] - Parse variables: (ex. y=3.5)
			[x] - Save value into variable (ex. 2pi=x)
			[x] - Differentiate: x=2.5 with 2pi=x where a space is needed between = and x
		[x] - Make sure is reloaded after equations: ex. 2pi*y=y 5.2-y
		[x] - Make sure constants are not overwritten: ex. 2pi*y=pi 5.2-pi
	[ ] - Parse-checking, especially for parentheses-nesting
## Variable Format and Units
	[ ] - Formatting/unit passing: ex. y:F:'%3.1f'=3.2 (where y is always expressed formatted C)
	[ ] - C-format with text: (:'$%.2f'). Look for % or ' (ending ', recognize \')
	[ ] - Stacked variable handling: ex. y 4.5 x <= each stack variable is multiplied
		[ ] - if number already in stack, we should be able to do: ':"::mm' to go from inch '"' to 'mm' on the stack
		[ ] - multiply/add everything in the stack
		[ ] - access stack by index "[1]". If not available, ask.
		[ ] - relative stack access e.g. "[-1]"
		[ ] - swap last "[-]" - especially for subtract/divide
## Numeric formatting
	[x] - Default should be %.9f
		[ ] - Format using %f (General with cleanup)
	[x] - Default (clean) formatting 2.540000000 => 2.54 (using standard '%f' format)
	[x] - Hexadecial "0x" %X (input)
	[ ] - Numeric formatting (similar C-style):
		> fnc pi:'%.2f'  <= May need encapulation method (')
		> 3.14
	[ ] - Hexadecimal output (possibly with "0x" or "h")
	[ ] - Hex Format (output) for IEEE-754 (different modes)
	[ ] - Fraction formatting (using radix of 8, 16, 32, 64, div2, div10, div100 div1000, etc.)
	[ ] - Non-formatted removal of leading/training zeroes
	[ ] - Float representations: ex. f->e
	[ ] - Integer representations of float: ex. 3.5 => 3 (floor) or =>4 (ceiling/round)
	[ ] - UTF-8 use - esp. of degrees, inches, Ohms, micro and fractions, etc.
## Date-Time parsing
	[ ] - Need Time/date formatting:
		> fnc 6:03:29p + 1:43m<br>
		> **6:05:12p**<br>
		> Date format: 2001:10:02# or 2001:10:02d 12:10:02BC <br>
		> **4:55:10**p
## Stack Manipulations
	[ ] - clear stack using delimiter ';' (???)
	[ ] - index stack '[1]' - origin 1?
	[ ] - express new equation(s) after assignment (parsing operation):
		ex. 2y+5=x; 4.5-x as opposed to 2y+5=x 4.5-x <= this will multiply x to 4.5 before subtracting
	[ ] - complete stack multiplication, implied stack operation (run-time operation) => multiply current stack contents
## Verbose mode (debugging) for:
	[ ] - command argument parsing - in 'fnc.cpp'
	[ ] - intermediate value output - in 'func.cpp'
	[ ] - add '--help' in command line
## Saving functions, assignments, etc.
	[x] - Default states
		[x] - Degree/radian for trans functions
		[ ] - Method to set initial degree/radian (or show in Interactive mode)
		[x] - Show "how to quit" message for start of Interactive Mode
		[x] - ShowUndefined unit for conversion error
		[ ] - Error queries to set "Do not show this message again" (reset flag)
	[ ] - Save to/Retrieve from INI file
	[ ] - Need generic functions list (not associated with "--"):
		[x] - list of variables
		[x] - list of operators/functions
		[ ] - list of units
		[ ] - list of unit-conversions
	[ ] - Method to save/retrieve (in ~/.fnc):
		[ ] - variables, including unit/format (above)
		[ ] - functions
		[ ] - unit-conversions
	[ ] - command line argument saves (by configuration)
	[ ] - formula retrieval (by configuration)
		[ ] - Binary function retrieval
	[ ] - Need a method to remove functions to archive
## Miscellaneous
[ ] - Simplify unit-types. Differentiate between common unit-types verses common unit-select strings. (Num.cpp)
	[ ] NOTE: UnitDef is in Convert.h while actual Units are defined in Num.cpp (kinda crazy)
	[ ] NOTE: Number types are in numUnit.h while number-types are used in Num.cpp
[ ] - Separate number handling (m_dValue and m_lValue as structures - Number) from Num
	[ ] - Use variables with Num rather than ConstantVars
[ ] - On-the-fly formatting
	[ ] - Use of ":%"
	[ ] - Convert a single number from decimal to hexadecimal (v.v.)
[ ] - Finish interactive mode
	[ ] - Extract using getch() - especially for 'bash'
	[ ] - Save/retrieve functions from INI map.
	[ ] - Set radian/degree as default - save in INI file.
	[ ] - Interactive mode with ncurses (TBD?)
[ ] - Function changes (may be extensive):
	[ ] - Modify "unit conversion" from "::" to ">>"
[ ] - Numeric precision (ex.: IEEE-754 binary-128 and decimal-64/128) (TBD)
	[ ] - Numeric "shifting"
[ ] - Comma functions (TBD)
[ ] - Use of Complex numbers (TBD):
	[ ] - Number entry (?)
	[ ] - Frequency computation on RC circuit (R,C>frequency; freq,R>C; etc.) - algebraic convesion (TBD)
	[ ] - Resolving quadratic equations with 2 solutions (ex. TBD)
[ ] - Internal or external use of Python/MatLab
[ ] - Doxygen cleanup
[ ] - CMake tests for all builds
[ ] - CMake installation (./bootstrap?)
[ ] - Clean up all std::string to use CalString

Interactive Mode Commands:
-------------------------
[ ] - Need history (in .fnc files)
[ ] - Need undo (last command)
[ ] - Need list of functions (in help), both defined and created
[ ] - Need list of units and its conversion (if unit defined, all its conversion)
[ ] - List of (successful) equations
[ ] - List of results in stack, with equivalent equations (?)
[ ] - list of units (list s_conversion)
[ ] - list of unit-conversions for a given conversion
[ ] - list of variables (and constants?)
[ ] - create an external list added when needed
[ ] - Add help including a method for unit-conversions

Vars to add:
-----------
[ ] - Angle: Gradian
[ ] - Temperature: Kelvin, Rankine
[ ] - Volume
[ ]

